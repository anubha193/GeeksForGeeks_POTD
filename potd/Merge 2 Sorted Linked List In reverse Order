class GfG
{
    Node mergeResult(Node node1, Node node2)
    {
	Node a=node1;
	Node b=node2;
	if(a==null)return reverse(b);
	if(b==null)return reverse(a);
	Node head=null,tail=null;
	if(a.data<=b.data)
	{
	 head=a;
	 tail=a;
	 a=a.next;
	}
	else
	{
	   head=b;
	   tail=b;
	   b=b.next;
	}
	while(a!=null && b!=null)
	{
	    if(a.data<=b.data)
	    {
	        tail.next=a;
	        tail=a;
	        a=a.next;
	    }
	    else{
	        tail.next=b;
	        tail=b;
	        b=b.next;
	    }
	}
	if(a==null)tail.next=b;
	if(b==null)tail.next=a;
	return reverse(head);
    }
     static Node reverse(Node node)
    {
        Node prev = null;
        Node current = node;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }
}
